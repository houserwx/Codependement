import { Agent } from './base-agent';
import { AgentType, Task } from './types';

/**
 * DocumenterAgent - Creates comprehensive documentation
 */
export class DocumenterAgent extends Agent {
    constructor() {
        super(AgentType.DOCUMENTER, "Documenter", "Creates comprehensive documentation");
    }

    async processTask(task: Task, context?: any): Promise<string> {
        console.log(`[Documenter] Processing task: ${task.description}`);
        
        try {
            const docType = this.determineDocumentationType(task.description);
            const targetName = this.extractTargetName(task.description);
            
            let documentation = '';
            let filename = '';

            switch (docType) {
                case 'api':
                    const apiDoc = this.generateApiDocumentation(targetName, task.description, context);
                    documentation = apiDoc.content;
                    filename = apiDoc.filename;
                    break;
                case 'class':
                    const classDoc = this.generateClassDocumentation(targetName, task.description, context);
                    documentation = classDoc.content;
                    filename = classDoc.filename;
                    break;
                case 'function':
                    const functionDoc = this.generateFunctionDocumentation(targetName, task.description, context);
                    documentation = functionDoc.content;
                    filename = functionDoc.filename;
                    break;
                case 'component':
                    const componentDoc = this.generateComponentDocumentation(targetName, task.description, context);
                    documentation = componentDoc.content;
                    filename = componentDoc.filename;
                    break;
                case 'project':
                    const projectDoc = this.generateProjectDocumentation(task.description, context);
                    documentation = projectDoc.content;
                    filename = projectDoc.filename;
                    break;
                default:
                    const genericDoc = this.generateGenericDocumentation(targetName, task.description, context);
                    documentation = genericDoc.content;
                    filename = genericDoc.filename;
            }

            if (documentation && filename) {
                await this.writeDocumentationToFile(filename, documentation, context);
                return `📝 Generated documentation: ${filename}\n\n${documentation}`;
            } else {
                return `⚠️ Could not generate specific documentation for: ${task.description}`;
            }
        } catch (error) {
            return `❌ Documentation generation failed: ${error}`;
        }
    }

    private generateApiDocumentation(targetName: string, description: string, context?: any): { content: string; filename: string } {
        const content = `# ${targetName} API Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

The ${targetName} API provides endpoints for managing ${targetName.toLowerCase()} resources.

## Base URL

\\\`\\\`\\\`
https://api.example.com/v1
\\\`\\\`\\\`

## Authentication

All API requests require authentication using Bearer tokens:

\\\`\\\`\\\`http
Authorization: Bearer <your-token>
\\\`\\\`\\\`

## Endpoints

### GET /${targetName.toLowerCase()}

Retrieve all ${targetName.toLowerCase()} items.

**Request:**
\\\`\\\`\\\`http
GET /${targetName.toLowerCase()}
Content-Type: application/json
Authorization: Bearer <token>
\\\`\\\`\\\`

**Response:**
\\\`\\\`\\\`json
{
  "message": "Success",
  "data": [
    {
      "id": "string",
      "name": "string",
      "createdAt": "2025-07-31T00:00:00Z",
      "updatedAt": "2025-07-31T00:00:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 100
  }
}
\\\`\\\`\\\`

### POST /${targetName.toLowerCase()}

Create a new ${targetName.toLowerCase()} item.

**Request:**
\\\`\\\`\\\`http
POST /${targetName.toLowerCase()}
Content-Type: application/json
Authorization: Bearer <token>

{
  "name": "string",
  "description": "string"
}
\\\`\\\`\\\`

**Response:**
\\\`\\\`\\\`json
{
  "message": "${targetName} created successfully",
  "data": {
    "id": "generated-id",
    "name": "string",
    "description": "string",
    "createdAt": "2025-07-31T00:00:00Z"
  }
}
\\\`\\\`\\\`

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: `docs/api/${targetName.toLowerCase()}-api.md`
        };
    }

    private generateClassDocumentation(targetName: string, description: string, context?: any): { content: string; filename: string } {
        const content = `# ${targetName} Class Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

The \\\`${targetName}\\\` class provides functionality for ${description.toLowerCase()}.

## Usage Examples

### Basic Usage

\\\`\\\`\\\`typescript
import { ${targetName} } from './${targetName}';

// Create instance
const instance = new ${targetName}();

// Check initialization status
if (instance.isInitialized) {
    // Use the instance
    instance.someMethod();
}
\\\`\\\`\\\`

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: `docs/classes/${targetName}.md`
        };
    }

    private generateFunctionDocumentation(targetName: string, description: string, context?: any): { content: string; filename: string } {
        const content = `# ${targetName} Function Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

The \\\`${targetName}\\\` function provides functionality for ${description.toLowerCase()}.

## Usage Examples

### Basic Usage

\\\`\\\`\\\`typescript
import { ${targetName} } from './${targetName}';

async function example() {
    try {
        const result = await ${targetName}('parameter1', 42);
        
        if (result.success) {
            console.log('Operation succeeded:', result.data);
        } else {
            console.error('Operation failed:', result.error);
        }
    } catch (error) {
        console.error('Function call failed:', error.message);
    }
}
\\\`\\\`\\\`

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: `docs/functions/${targetName}.md`
        };
    }

    private generateComponentDocumentation(targetName: string, description: string, context?: any): { content: string; filename: string } {
        const content = `# ${targetName} Component Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

The \\\`${targetName}\\\` component provides ${description.toLowerCase()} functionality for React applications.

## Usage Examples

### Basic Usage

\\\`\\\`\\\`jsx
import React from 'react';
import { ${targetName} } from './components/${targetName}';

function App() {
    const handleAction = () => {
        console.log('Action triggered');
    };

    return (
        <div>
            <${targetName} onAction={handleAction} />
        </div>
    );
}
\\\`\\\`\\\`

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: `docs/components/${targetName}.md`
        };
    }

    private generateProjectDocumentation(description: string, context?: any): { content: string; filename: string } {
        const projectName = context?.workspaceInfo?.name || 'Project';
        
        const content = `# ${projectName} Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

${projectName} is a ${context?.projectType || 'software'} project that provides ${description.toLowerCase()}.

## Quick Start

### Prerequisites

- Node.js 18+ 
- npm or yarn
- Git

### Installation

\\\`\\\`\\\`bash
# Clone the repository
git clone https://github.com/your-org/${projectName.toLowerCase()}.git
cd ${projectName.toLowerCase()}

# Install dependencies
npm install

# Start development server
npm run dev
\\\`\\\`\\\`

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: 'docs/README.md'
        };
    }

    private generateGenericDocumentation(targetName: string, description: string, context?: any): { content: string; filename: string } {
        const content = `# ${targetName} Documentation

> Generated by DocumenterAgent for: ${description}

## Overview

Documentation for ${targetName} - ${description.toLowerCase()}.

## Description

${description}

## Usage

TODO: Add usage instructions and examples.

---

*Documentation generated on ${new Date().toISOString()}*`;

        return {
            content,
            filename: `docs/${targetName.toLowerCase()}.md`
        };
    }

    private determineDocumentationType(description: string): 'api' | 'class' | 'function' | 'component' | 'project' | 'generic' {
        const desc = description.toLowerCase();
        
        if (desc.includes('api') || desc.includes('endpoint') || desc.includes('rest')) {
            return 'api';
        }
        if (desc.includes('class')) {
            return 'class';
        }
        if (desc.includes('function')) {
            return 'function';
        }
        if (desc.includes('component') || desc.includes('react')) {
            return 'component';
        }
        if (desc.includes('project') || desc.includes('application') || desc.includes('system')) {
            return 'project';
        }
        
        return 'generic';
    }

    private extractTargetName(description: string): string {
        const patterns = [
            /(?:for|of)\s+(\w+)/i,
            /(\w+)\s+(?:documentation|docs)/i,
            /(?:document|documenting)\s+(\w+)/i,
            /(\w+)(?:\s+class|\s+function|\s+component|\s+api)/i
        ];
        
        for (const pattern of patterns) {
            const match = description.match(pattern);
            if (match) {
                return match[1];
            }
        }
        
        return 'Target';
    }

    private async writeDocumentationToFile(filename: string, content: string, context?: any): Promise<void> {
        console.log(`[DocumenterAgent] Writing documentation to ${filename}`);
        // TODO: Integrate with actual VS Code file system API
    }
}
